#!/usr/bin/env python3
import socket
import sys

# Generic GET request. If not the first time, then add the csrftoken and sessionID.
def sendGET(connection, url, loginHuh = False, csrfToken = None, sessionID = None):
    # Construct the GET request.
    get_req = (f"GET " + url + " HTTP/1.1\r\n"
    "Host: webcrawler-site.ccs.neu.edu\r\n")
    if not loginHuh:
        get_req += "Cookie: " + csrfToken + "\r\n"
        get_req += "Cookie: " + sessionID + "\r\n"
    get_req += "\r\n"

    # Encode and send the previosuly constructed GET request.
    get_req = get_req.encode('ascii')
    connection.sendall(get_req)
    
    # Return the response we get from the GET request.
    response = bytes.decode(connection.recv(4096))
    return response

# Method used to retrieeve the log in cookie that will help us stay logged in.
def login():
  # Setting up the connection.
  HOST = 'webcrawler-site.ccs.neu.edu'
  PORT = 80
  connection = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
  connection.connect(( HOST, PORT ))

  # Retrieve the GET response and pull both csrf tokens from the login page.
  response = sendGET(connection, "/accounts/login/", True)
  # Find csrftoken lcoated in header.
  csrf1index = response.index("csrftoken")
  # Find csrftoken in body.
  csrf2index = response.index("csrfmiddlewaretoken")
  # CSRFToken pulled from header of initial GET request.
  csrfToken1 = response[csrf1index + 10 : csrf1index + 74]
  # CSRFToken pulled from the hidden csrfmiddlewaretoken field in body of initial GET request.
  csrfToken2 = response[csrf2index + 28 : csrf2index + 92]

  # Forge the POST request with the current csrf token to sign into fakebook.
  usernamePass = "username=" + sys.argv[1] + "&password=" + sys.argv[2]
  payload = "" + usernamePass + "&csrfmiddlewaretoken=" + csrfToken2 + "&next=\r\n"
  POST_REQUEST = (f"POST /accounts/login/ HTTP/1.1\r\n"
  "Host: webcrawler-site.ccs.neu.edu\r\n"
  "Accept-Encoding: gzip, deflate\r\n"
  "Referer: http://webcrawler-site.ccs.neu.edu/accounts/login/\r\n"
  "Content-Type: application/x-www-form-urlencoded\r\n"
  "Content-Length: " + str(len(payload)) + "\r\n"
  "Origin: http://webcrawler-site.ccs.neu.edu\r\n"
  "Connection: keep-alive\r\n"
  "Cookie: csrftoken=" + csrfToken1 + "\r\n"
  "Upgrade-Insecure-Requests: 1\r\n"
  "\r\n"
  + payload + "\r\n")
  POST_REQUEST = POST_REQUEST.encode('ascii')

  # Send the Post request.
  connection.sendall(POST_REQUEST)
  postResponse = bytes.decode(connection.recv(4096))

  # Give me the cookie and the sessionID.
  cookieIndex = postResponse.index("csrftoken")
  sessionIDIndex = postResponse.index("sessionid")
  cookie = postResponse[cookieIndex + 10 : cookieIndex + 74]
  sessionID = postResponse[sessionIDIndex + 10 : sessionIDIndex + 42]
  return cookie, sessionID
 
# Main method for this webcrawler. 
# Get cookie, start searching for links and flags, maintain queue of valid links left to explore, print out found flags.
def main():
  cookie, sessionID = login()
  print("Cookie: ", cookie)
  print("SessionID: ", sessionID)
  
if __name__ == "__main__":
  # Command line specification enforcing.
  if not(len(sys.argv) == 3):
    sys.exit("Usage: ./webcrawler [username] [password]")
  # Call the main method.
  main()
